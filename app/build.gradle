def buildTime() {
//    def df = new SimpleDateFormat("yyyy-MM-dd HH:mm")
    def df = new SimpleDateFormat("MMddHHmm")
    df.setTimeZone(TimeZone.getTimeZone("GMT+8"))
    def time = df.format(new Date())
    println("buildTime : $time")
    return time
}

//获取git提交次数
static def getGitCommitCount() {
    return Integer.parseInt('git rev-list --count HEAD'.execute().text.trim())
}

//获取git号
static def getGitCommitId() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

apply plugin: 'stringfog'

// 导入RandomKeyGenerator类，如果使用HardCodeKeyGenerator，更换下类名
import com.github.megatronking.stringfog.plugin.kg.RandomKeyGenerator
import com.github.megatronking.stringfog.plugin.StringFogMode

import java.text.SimpleDateFormat

stringfog {
    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 可选：StringFog会自动尝试获取packageName，如果遇到获取失败的情况，可以显式地指定。
    packageName 'com.github.megatronking.stringfog.app'
    // 可选：加密开关，默认开启。
    enable true
    // 可选：指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['com.goofish.emm']
    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
    kg new RandomKeyGenerator()
    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
    // 也可以使用text或者bytes
    mode StringFogMode.bytes
}

android {
    namespace 'com.afwsamples.testdpc'
    compileSdk 34

    signingConfigs {
//        debug {
//            storeFile file('../testkey.jks')
//            storePassword 'android'
//            keyAlias 'android'
//            keyPassword 'android'
//        }

        goofish {
            storeFile file('../goofish.jks')
            storePassword 'goofish.sec'
            keyAlias 'goofish'
            keyPassword 'goofish.sec'
        }
    }

    defaultConfig {
//        applicationId "com.afwsamples.testdpc"
        applicationId "com.goofish.emm"
        minSdk 23
        targetSdk 34
        versionCode getGitCommitCount()
        versionName "V1.0.0-${buildTime()}-${versionCode}-${getGitCommitId()}"
        buildConfigField("String", "BUILD_TIME", '"' + buildTime() + '"')

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.goofish
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.goofish
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        aidl = true
        buildConfig = true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    applicationVariants.all { variant ->

        variant.outputs.all { output ->
            output.versionNameOverride =
                    android.defaultConfig.versionName + "-" + variant.buildType.name
//            def fileName = outputFileName.replace("app", applicationId + "_" + android.defaultConfig.versionName)
            var fileName = outputFileName.replace(
                    "app",
                    rootProject.name + "_" + android.defaultConfig.versionName
            )
            fileName = fileName.replace("-", "_")
            println(fileName)
            outputFileName = fileName
        }
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.core.ktx
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.collection:collection:1.2.0'
    implementation 'androidx.core:core:1.10.1'
    implementation 'androidx.enterprise:enterprise-feedback:1.1.0-alpha02'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-common:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-process:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-runtime:2.6.1'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.1'

    implementation project(':setupdesign')

    implementation project(':setupcompat')

    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'

    implementation 'com.google.guava:guava:33.2.0-android'


    implementation 'com.blankj:utilcodex:1.31.1'

    implementation 'com.github.megatronking.stringfog:xor:5.0.0'

    // Retrofit and Gson
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Optional: Logging Interceptor for Retrofit
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'

    implementation 'io.github.azhon:appupdate:4.3.2'

    implementation 'com.tencent:mmkv:1.3.5'

    implementation 'io.github.petterpx:floatingx:2.1.1'

    implementation 'com.github.princekin-f:EasyFloat:2.0.4'

    implementation 'com.kongzue.dialogx:DialogX:0.0.49'

    implementation libs.glide

//    implementation 'com.liulishuo.okdownload:okdownload:1.0.7'
//    implementation 'com.liulishuo.okdownload:sqlite:1.0.7'
//
//    implementation 'com.liulishuo.okdownload:okhttp:1.0.7'

    implementation "com.github.tonyofrancis.Fetch:fetch2:3.3.0"

    implementation 'com.github.jenly1314:circleprogressview:1.1.3'

    implementation 'io.github.medyo:android-about-page:2.0.0'
}